
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  documentId: 'documentId',
  email: 'email',
  phone: 'phone',
  whatsapp: 'whatsapp',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  birthDate: 'birthDate',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  brand: 'brand',
  model: 'model',
  year: 'year',
  color: 'color',
  plate: 'plate',
  chassisId: 'chassisId',
  fuelType: 'fuelType',
  mileage: 'mileage',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  tradeName: 'tradeName',
  companyName: 'companyName',
  documentId: 'documentId',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  salesContact: 'salesContact',
  paymentTermDays: 'paymentTermDays',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  documentId: 'documentId',
  email: 'email',
  phone: 'phone',
  position: 'position',
  salary: 'salary',
  commissionPercent: 'commissionPercent',
  hireDate: 'hireDate',
  terminationDate: 'terminationDate',
  address: 'address',
  pixKey: 'pixKey',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  internalCode: 'internalCode',
  barcode: 'barcode',
  name: 'name',
  description: 'description',
  brand: 'brand',
  unit: 'unit',
  costPrice: 'costPrice',
  salePrice: 'salePrice',
  profitMargin: 'profitMargin',
  currentStock: 'currentStock',
  minimumStock: 'minimumStock',
  maximumStock: 'maximumStock',
  location: 'location',
  ncmCode: 'ncmCode',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  description: 'description',
  price: 'price',
  estimatedTimeMinutes: 'estimatedTimeMinutes',
  mechanicCommission: 'mechanicCommission',
  notes: 'notes',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StockMovementScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  movementType: 'movementType',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalValue: 'totalValue',
  documentNumber: 'documentNumber',
  notes: 'notes',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  customerId: 'customerId',
  vehicleId: 'vehicleId',
  responsibleEmployeeId: 'responsibleEmployeeId',
  entryDate: 'entryDate',
  expectedDeliveryDate: 'expectedDeliveryDate',
  deliveryDate: 'deliveryDate',
  vehicleMileage: 'vehicleMileage',
  reportedProblem: 'reportedProblem',
  executedServices: 'executedServices',
  internalNotes: 'internalNotes',
  customerNotes: 'customerNotes',
  status: 'status',
  priority: 'priority',
  totalValue: 'totalValue',
  discountValue: 'discountValue',
  finalValue: 'finalValue',
  warrantyDays: 'warrantyDays',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.ServiceOrderServiceScalarFieldEnum = {
  id: 'id',
  serviceOrderId: 'serviceOrderId',
  serviceId: 'serviceId',
  employeeId: 'employeeId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  additionalDescription: 'additionalDescription',
  executionDate: 'executionDate',
  executionTimeMinutes: 'executionTimeMinutes',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceOrderProductScalarFieldEnum = {
  id: 'id',
  serviceOrderId: 'serviceOrderId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  additionalDescription: 'additionalDescription',
  isApplied: 'isApplied',
  applicationDate: 'applicationDate',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  feePercent: 'feePercent',
  receiveDays: 'receiveDays',
  isActive: 'isActive'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  saleNumber: 'saleNumber',
  serviceOrderId: 'serviceOrderId',
  customerId: 'customerId',
  employeeId: 'employeeId',
  saleDate: 'saleDate',
  grossValue: 'grossValue',
  discountValue: 'discountValue',
  netValue: 'netValue',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.ReceivableScalarFieldEnum = {
  id: 'id',
  saleId: 'saleId',
  paymentMethodId: 'paymentMethodId',
  installmentNumber: 'installmentNumber',
  value: 'value',
  dueDate: 'dueDate',
  paymentDate: 'paymentDate',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.AccountPayableScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  employeeId: 'employeeId',
  description: 'description',
  category: 'category',
  value: 'value',
  dueDate: 'dueDate',
  paymentDate: 'paymentDate',
  paymentMethod: 'paymentMethod',
  documentNumber: 'documentNumber',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  vehicleId: 'vehicleId',
  employeeId: 'employeeId',
  appointmentDate: 'appointmentDate',
  expectedEndDate: 'expectedEndDate',
  requestedService: 'requestedService',
  notes: 'notes',
  status: 'status',
  reminderSent: 'reminderSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.FuelType = exports.$Enums.FuelType = {
  GASOLINE: 'GASOLINE',
  ETHANOL: 'ETHANOL',
  FLEX: 'FLEX',
  DIESEL: 'DIESEL',
  CNG: 'CNG',
  ELECTRIC: 'ELECTRIC',
  HYBRID: 'HYBRID'
};

exports.Position = exports.$Enums.Position = {
  MECHANIC: 'MECHANIC',
  TIRE_TECHNICIAN: 'TIRE_TECHNICIAN',
  ATTENDANT: 'ATTENDANT',
  MANAGER: 'MANAGER',
  OWNER: 'OWNER'
};

exports.CategoryType = exports.$Enums.CategoryType = {
  PRODUCT: 'PRODUCT',
  SERVICE: 'SERVICE',
  BOTH: 'BOTH'
};

exports.Unit = exports.$Enums.Unit = {
  PIECE: 'PIECE',
  KILOGRAM: 'KILOGRAM',
  LITER: 'LITER',
  METER: 'METER',
  SQUARE_METER: 'SQUARE_METER',
  BOX: 'BOX',
  PAIR: 'PAIR'
};

exports.MovementType = exports.$Enums.MovementType = {
  IN: 'IN',
  OUT: 'OUT',
  ADJUSTMENT: 'ADJUSTMENT',
  RETURN: 'RETURN'
};

exports.ServiceOrderStatus = exports.$Enums.ServiceOrderStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  WAITING_PARTS: 'WAITING_PARTS',
  WAITING_CUSTOMER: 'WAITING_CUSTOMER',
  COMPLETED: 'COMPLETED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ServiceStatus = exports.$Enums.ServiceStatus = {
  PENDING: 'PENDING',
  IN_EXECUTION: 'IN_EXECUTION',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  CASH: 'CASH',
  DEBIT_CARD: 'DEBIT_CARD',
  CREDIT_CARD: 'CREDIT_CARD',
  PIX: 'PIX',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK',
  INSTALLMENT_PLAN: 'INSTALLMENT_PLAN'
};

exports.SaleStatus = exports.$Enums.SaleStatus = {
  OPEN: 'OPEN',
  PAID: 'PAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  CANCELLED: 'CANCELLED'
};

exports.ReceivableStatus = exports.$Enums.ReceivableStatus = {
  PENDING: 'PENDING',
  RECEIVED: 'RECEIVED',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.PayableCategory = exports.$Enums.PayableCategory = {
  SUPPLIER: 'SUPPLIER',
  SALARY: 'SALARY',
  COMMISSION: 'COMMISSION',
  RENT: 'RENT',
  ELECTRICITY: 'ELECTRICITY',
  WATER: 'WATER',
  PHONE: 'PHONE',
  INTERNET: 'INTERNET',
  TAXES: 'TAXES',
  OTHERS: 'OTHERS'
};

exports.PayableStatus = exports.$Enums.PayableStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  CONFIRMED: 'CONFIRMED',
  IN_SERVICE: 'IN_SERVICE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Customer: 'Customer',
  Vehicle: 'Vehicle',
  Supplier: 'Supplier',
  Employee: 'Employee',
  Category: 'Category',
  Product: 'Product',
  Service: 'Service',
  StockMovement: 'StockMovement',
  ServiceOrder: 'ServiceOrder',
  ServiceOrderService: 'ServiceOrderService',
  ServiceOrderProduct: 'ServiceOrderProduct',
  PaymentMethod: 'PaymentMethod',
  Sale: 'Sale',
  Receivable: 'Receivable',
  AccountPayable: 'AccountPayable',
  Appointment: 'Appointment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
